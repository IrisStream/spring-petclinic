pipeline
{
	agent any
	options {
        skipStagesAfterUnstable()

    }
	stages
	{
		stage("Update stage")
		{
			steps
			{
				sh 'jenkins-pipeline/scripts/update_repo.sh'
			}
		}
        stage('SonarQube Analysis') {
			steps
			{
                withSonarQubeEnv(installationName: 'sonarqube') {
                    sh 'jenkins-pipeline/scripts/sonarqube.sh'
                }
			}
        }
		// stage("Build stage")
		// {
		// 	steps
		// 	{
		// 		sh 'jenkins-pipeline/scripts/build.sh'
		// 	}
		// }
		stage("Test stage")
		{
			steps
			{
				sh "jenkins-pipeline/scripts/test.sh"
			}
		}
		stage("Push jar to Nexus stage")
		{
			steps
			{
				sh "jenkins-pipeline/scripts/push_to_nexus.sh"
			}
		}
		stage("Deploy")
		{
			steps
			{
				sh "jenkins-pipeline/scripts/deploy.sh"
			}
		}
        stage('Check Availability') {
            options
            {
                timeout(time: 1, unit: 'MINUTES')
            }
            steps {             
                script {
                    RESPONCE = sh(script: "curl -s --head  --request GET  deploy:8080")
                    if (${RESPONCE} != "HTTP/1.1 200")
                    {
                        sh "jenkins-pipeline/scripts/rollback.sh"
                    }
                    else
                    {
                        echo "Dont rollback"
                    }
                }    
            }
       }
	}
	post
	{
		always
		{
            echo 'Done'
		}
        success {
            mail to:"ngodaisonn@gmail.com", subject:"SUCCESS: ${currentBuild.fullDisplayName}", body: "Yay, we passed."
        }
        failure {
            mail to:"ngodaisonn@gmail.com", subject:"FAILURE: ${currentBuild.fullDisplayName}", body: "Boo, we failed."
        }
	}
}
